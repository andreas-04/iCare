import {
  AccordionContext_default
} from "./chunk-NLU6WHMY.js";
import {
  accordionDetailsClasses_default,
  getAccordionDetailsUtilityClass
} from "./chunk-ZCTMZUJQ.js";
import {
  styled_default,
  useSlot,
  useThemeProps
} from "./chunk-6HMJ44QW.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  composeClasses,
  init_extends,
  init_objectWithoutPropertiesLoose,
  init_utils,
  useForkRef
} from "./chunk-DVJQDB7P.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_prop_types
} from "./chunk-XAUU4KKC.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@mui/joy/AccordionDetails/AccordionDetails.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_utils();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["component", "children", "color", "variant", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    expanded
  } = ownerState;
  const slots = {
    root: ["root", expanded && "expanded"],
    content: ["content", expanded && "expanded"]
  };
  return composeClasses(slots, getAccordionDetailsUtilityClass, {});
};
var AccordionDetailsRoot = styled_default("div", {
  name: "JoyAccordionDetails",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({
    overflow: "hidden",
    borderRadius: "var(--AccordionDetails-radius)",
    display: "grid",
    gridTemplateRows: "1fr",
    marginInline: "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
    transition: "var(--AccordionDetails-transition)"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    [`&:not(.${accordionDetailsClasses_default.expanded})`]: {
      gridTemplateRows: "0fr"
    }
  });
});
var AccordionDetailsContent = styled_default("div", {
  name: "JoyAccordionDetails",
  slot: "Content",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  overflow: "hidden",
  // required for user-provided transition to work
  // Need to apply padding to content rather than root because the overflow.
  // Otherwise, the focus ring of the children can be cut off.
  paddingInlineStart: "var(--ListItem-paddingLeft)",
  paddingInlineEnd: "var(--ListItem-paddingRight)",
  paddingBlockStart: "calc(var(--ListItem-paddingY) / 2)",
  paddingBlockEnd: "calc(2.5 * var(--ListItem-paddingY))",
  transition: "var(--AccordionDetails-transition)",
  [`&:not(.${accordionDetailsClasses_default.expanded})`]: {
    paddingBlock: 0
  }
});
var AccordionDetails = React.forwardRef(function AccordionDetails2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAccordionDetails"
  });
  const {
    component = "div",
    children,
    color = "neutral",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    accordionId,
    expanded = false
  } = React.useContext(AccordionContext_default);
  const rootRef = React.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  React.useEffect(() => {
    if (rootRef.current) {
      const elements = rootRef.current.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])');
      elements.forEach((elm) => {
        if (expanded) {
          const prevTabIndex = elm.getAttribute("data-prev-tabindex");
          const currentTabIndex = elm.getAttribute("tabindex");
          if (currentTabIndex && prevTabIndex) {
            elm.setAttribute("tabindex", prevTabIndex);
            elm.removeAttribute("data-prev-tabindex");
          }
          if (!prevTabIndex && !currentTabIndex) {
            elm.removeAttribute("tabindex");
          }
        } else {
          elm.setAttribute("data-prev-tabindex", elm.getAttribute("tabindex") || "");
          elm.setAttribute("tabindex", "-1");
        }
      });
    }
  }, [expanded]);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    expanded,
    nesting: true
    // for the List styles
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    className: classes.root,
    elementType: AccordionDetailsRoot,
    externalForwardedProps,
    additionalProps: {
      id: `${accordionId}-details`,
      "aria-labelledby": `${accordionId}-summary`,
      role: "region",
      hidden: expanded ? void 0 : true
    },
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: AccordionDetailsContent,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime.jsx)(SlotContent, _extends({}, contentProps, {
      children
    }))
  }));
});
true ? AccordionDetails.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionDetails if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    content: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    content: import_prop_types.default.elementType,
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var AccordionDetails_default = AccordionDetails;

export {
  AccordionDetails_default
};
//# sourceMappingURL=chunk-FPJK5W2X.js.map
